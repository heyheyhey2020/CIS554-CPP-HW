//HW6 by Can Luo
//SU Net ID: cluo13  SUID: 9431393361

//HW6 Due: March 8, Wednesday, at 11:59PM
#include <iostream>
#include <memory>
using namespace std;
template <typename T>
class Node { //Your T has to support either int or float
public:
    shared_ptr<T> pValue; //pValue is a pointer to an object of type T
    shared_ptr<Node<T>> row_next;//Points to the next node in the same row
    shared_ptr<Node<T>> col_next;//Points to the next node in the same col
    Node() {}
    Node(T v) { pValue = make_shared<T>(v); }// pValue.reset(new T(v)); will also work,but slower
};

template <typename T>
class Ring2D {
public:
    shared_ptr<Node<T>> head;//Points to the node at first row and first column
    Ring2D() {};

    //Implement the following functions:

    Ring2D(const initializer_list<T>& I); //initializer_list
    /*
    the first two number in the initializer_list will be number of rows and number of columns
    followed by values in each row
    For example, for  3 4  1 2 3 4  5 6 7 8  9 10 11 12: 3 rows and 4 columns; first row: to 1 2 3 4;
    second row: 5 6 7 8; third row 9 10 11 12
    */

    ~Ring2D();//destructor; whenever possible, you should do minimum work.



    Ring2D(const Ring2D<T>& R);//copy constructor
    void operator=(const Ring2D<T>& R);//Lvalue operator=; copy assignment
    Ring2D(Ring2D<T>&& R);//move constructor
    void operator=(Ring2D<T>&& R);//Rvalue operator=; move assignment
    Ring2D<T> ThreeTimes();//Return a Ring2D with values being three times of the current Ring2D

    void DeleteRow(int r);//Delete row r of Ring2D
    //If r is out of range, simply do nothing and return.

};


//initializer_list
template <class T> Ring2D<T>::Ring2D(const initializer_list<T> &I) {
    //if initializer_list is empty, directly return
    if(I.size()==0) {
        cout << "Initializer_list" << endl;
        return;}

    //else if o row or 0 column, directly return
    auto p = I.begin();
    int Row = *p;
    p++;
    int Col = *p;
    p++;
    if(Row==0||Col==0){
        cout << "Initializer_list" << endl;
        return;}
//    cout << Row << " " << Col << endl;
    if(Row*Col+2 != I.size() ){ // if the format is not valid, directly return
        cout << "Initializer_list" << endl;
        return;
    }

    //construct the first row ring
    shared_ptr<Node<T>> stemp;
    for(int i=0;i<Col;i++){
        shared_ptr<Node<T>> sp = make_shared<Node<T>>();
        if(i==0) {stemp=sp;} //remember the last node -- to form the ring
        sp->row_next = head;
        head = sp;
        if(i==Col-1) {stemp->row_next = head;}
    }

    //construct a column ring for each node in the first row ring
    if(Row==1){ //if only one ring, directly form a column ring
        stemp = head;
        stemp->col_next = stemp;
        stemp = stemp->row_next;
        while(stemp!=head){
            stemp->col_next = stemp;
            stemp = stemp->row_next;
        }
    }else{ //if row is larger than 1, construct more node then form ring
        shared_ptr<Node<T>> stemp2 = head;
        for(int i=0;i<Row-1;i++){
            shared_ptr<Node<T>> sp = make_shared<Node<T>>();
            stemp2->col_next = sp;
            stemp2 = sp;
            if(i==Row-2) {sp->col_next = head;}
        }
        stemp2 = head->row_next;
        while(stemp2!= head){
            shared_ptr<Node<T>> stemp3 = stemp2; // stemp3 used to form  a column ring(remember the head for each node of the current row ring) for each iteration
            for(int i=0; i<Row-1; i++){
                shared_ptr<Node<T>> sp = make_shared<Node<T>>();
                stemp2->col_next = sp;
                stemp2 = sp;
                if(i==Row-2) {sp->col_next = stemp3;stemp2=stemp3;}
            }
            stemp2 = stemp2->row_next;
        }
    }

    // if column is more than 1 layer, we need to link it
    if(Row>1){
        if(Col == 1){
            shared_ptr<Node<T>> stemp1 = head;
            stemp1->col_next->row_next = stemp1->col_next;
            stemp1 = stemp1->col_next;
            while(stemp1!=head){
                stemp1->col_next->row_next = stemp1->col_next;
                stemp1 = stemp1->col_next;
            }
        }else{
            shared_ptr<Node<T>> stemp1 = head;
            shared_ptr<Node<T>> stemp2 = stemp1;
            shared_ptr<Node<T>> stemp3 = stemp2->row_next;
            while(stemp3!=stemp1){
                stemp2->col_next->row_next = stemp3->col_next;
                if(stemp3->row_next == stemp1) {stemp3->col_next->row_next = stemp1->col_next;}
                stemp2 = stemp2->row_next;
                stemp3 = stemp3->row_next;
            }
            stemp1 = head->col_next;
            stemp2 = stemp1;
            stemp3 = stemp2->row_next;
            while(stemp1!=head){
                while(stemp3!=stemp1){
                    stemp2->col_next->row_next = stemp3->col_next;
                    if(stemp3->row_next == stemp1) {stemp3->col_next->row_next = stemp1->col_next;}
                    stemp2 = stemp2->row_next;
                    stemp3 = stemp3->row_next;
//                    if(stemp3 == stemp1) {break;}
                }
                stemp1 = stemp1->col_next;
                stemp2 = stemp1;
                stemp3 = stemp2->row_next;
            }
        }
    }

    //assign value to each node
    shared_ptr<Node<T>>sp1 = head;
    shared_ptr<Node<T>>sp2;
    for(int i=0; i<Row; i++){
        sp2 = sp1;
        for(int i=0;i<Col;i++){
            int temp = *p;
            sp2->pValue = make_shared<T>(*p);
            p++;
            sp2 = sp2->row_next;
        }
        sp1 = sp1->col_next;
    }



    cout << "Initializer_list" << endl;
}

//destructor
template <class T> Ring2D<T>::~Ring2D() {
    //if head is nullptr, directly return
    if(!head){
        cout << "Destructor" << endl;
        return;}

    shared_ptr<Node<T>> sp1 = head->row_next;
    head->row_next.reset();
    shared_ptr<Node<T>> sp2 = head->col_next;
    while(sp2!=head){
        sp2->row_next.reset();
        sp2 = sp2->col_next;
    } // after these operations, the sp1 will be the actually new head;

    sp2 = sp1->col_next;
    while(sp1){
        sp1->col_next.reset();
        sp1 = sp1->row_next;
    } // after these operations, the sp2 will be the actually new head, and theis structure will change to a grid;

    sp2.reset();
        cout << "Destructor" << endl;
}


//constructor
template <class T> Ring2D<T>::Ring2D(const Ring2D<T>& R){
    // if R is is nullptr, directly return
    if(!R.head){
        cout << "Copy Constructor" << endl;
        return;
    }

    //get the number of row and column of R
    int Row = 1;
    int Col = 1;
    shared_ptr<Node<T>> sp1 = R.head->row_next;
    shared_ptr<Node<T>> sp2 = R.head->col_next;
    while(sp1!=R.head){
        Col++;
        sp1 = sp1->row_next;
    }
    while(sp2!=R.head){
        Row++;
        sp2 = sp2->col_next;
    }

    //construct the structure according to row and col
    //construct the first row ring
    shared_ptr<Node<T>> stemp;
    for(int i=0;i<Col;i++){
        shared_ptr<Node<T>> sp = make_shared<Node<T>>();
        if(i==0) {stemp=sp;} //remember the last node -- to form the ring
        sp->row_next = head;
        head = sp;
        if(i==Col-1) {stemp->row_next = head;}
    }

    //construct a column ring for each node in the first row ring
    if(Row==1){ //if only one ring, directly form a column ring
        stemp = head;
        stemp->col_next = stemp;
        stemp = stemp->row_next;
        while(stemp!=head){
            stemp->col_next = stemp;
            stemp = stemp->row_next;
        }
    }else{ //if row is larger than 2, construct more node then form ring
        shared_ptr<Node<T>> stemp2 = head;
        for(int i=0;i<Row-1;i++){
            shared_ptr<Node<T>> sp = make_shared<Node<T>>();
            stemp2->col_next = sp;
            stemp2 = sp;
            if(i==Row-2) {sp->col_next = head;}
        }
        stemp2 = head->row_next;
        while(stemp2!= head){
            shared_ptr<Node<T>> stemp3 = stemp2; // stemp3 used to form  a column ring(remember the head for each node of the current row ring) for each iteration
            for(int i=0; i<Row-1; i++){
                shared_ptr<Node<T>> sp = make_shared<Node<T>>();
                stemp2->col_next = sp;
                stemp2 = sp;
                if(i==Row-2) {sp->col_next = stemp3;stemp2=stemp3;}
            }
            stemp2 = stemp2->row_next;
        }
    }

    // if column is more than 1 layer, we need to link it
    if(Row>1){
        if(Col == 1){
            shared_ptr<Node<T>> stemp1 = head;
            stemp1->col_next->row_next = stemp1->col_next;
            stemp1 = stemp1->col_next;
            while(stemp1!=head){
                stemp1->col_next->row_next = stemp1->col_next;
                stemp1 = stemp1->col_next;
            }
        }else{
            shared_ptr<Node<T>> stemp1 = head;
            shared_ptr<Node<T>> stemp2 = stemp1;
            shared_ptr<Node<T>> stemp3 = stemp2->row_next;
            while(stemp3!=stemp1){
                stemp2->col_next->row_next = stemp3->col_next;
                if(stemp3->row_next == stemp1) {stemp3->col_next->row_next = stemp1->col_next;}
                stemp2 = stemp2->row_next;
                stemp3 = stemp3->row_next;
            }
            stemp1 = head->col_next;
            stemp2 = stemp1;
            stemp3 = stemp2->row_next;
            while(stemp1!=head){
                while(stemp3!=stemp1){
                    stemp2->col_next->row_next = stemp3->col_next;
                    if(stemp3->row_next == stemp1) {stemp3->col_next->row_next = stemp1->col_next;}
                    stemp2 = stemp2->row_next;
                    stemp3 = stemp3->row_next;
                    if(stemp3 == stemp1) {break;}
                }
                stemp1 = stemp1->col_next;
                stemp2 = stemp1;
                stemp3 = stemp2->row_next;
            }
        }
    }

    //assign value from R to *this
    shared_ptr<Node<T>> sp3 = R.head; // track row number of R
    shared_ptr<Node<T>> sp4; // track col number of R
    shared_ptr<Node<T>> sp5 = head; // track row number of *this
    shared_ptr<Node<T>> sp6; // track col number of *this
    for(int i=0; i<Row; i++){
        sp4 = sp3;
        sp6 = sp5;
        for(int j=0; j<Col; j++){
            sp6->pValue = make_shared<T>(*sp4->pValue);
            sp4 = sp4->row_next;
            sp6 = sp6->row_next;
        }
        sp3 = sp3->col_next;
        sp5 = sp5->col_next;
    }
    cout << "Copy Constructor" << endl;
}

template <class T> void Ring2D<T>::operator=(const Ring2D<T>& R){

    //delete the original structure
    if(head) {
        shared_ptr<Node<T>> sp1 = head->row_next;
        head->row_next.reset();
        shared_ptr<Node<T>> sp2 = head->col_next;
        while (sp2 != head) {
            sp2->row_next.reset();
            sp2 = sp2->col_next;
        } // after these operations, the sp1 will be the actually new head;

        sp2 = sp1->col_next;
        while (sp1) {
            sp1->col_next.reset();
            sp1 = sp1->row_next;
        } // after these operations, the sp2 will be the actually new head, and theis structure will change to a grid;

        sp2.reset();
    }

    if(R.head){
        int Row = 1;
        int Col = 1;
        shared_ptr<Node<T>> sp1 = R.head->row_next;
        shared_ptr<Node<T>> sp2 = R.head->col_next;
        while(sp1!=R.head){
            Col++;
            sp1 = sp1->row_next;
        }
        while(sp2!=R.head){
            Row++;
            sp2 = sp2->col_next;
        }
//    cout << Row << " " << Col << endl;

        //construct the structure according to row and col
        //construct the first row ring
        shared_ptr<Node<T>> stemp;
        for(int i=0;i<Col;i++){
            shared_ptr<Node<T>> sp = make_shared<Node<T>>();
            if(i==0) {stemp=sp;} //remember the last node -- to form the ring
            sp->row_next = head;
            head = sp;
            if(i==Col-1) {stemp->row_next = head;}
        }

        //construct a column ring for each node in the first row ring
        if(Row==1){ //if only one ring, directly form a column ring
            stemp = head;
            stemp->col_next = stemp;
            stemp = stemp->row_next;
            while(stemp!=head){
                stemp->col_next = stemp;
                stemp = stemp->row_next;
            }
        }else{ //if row is larger than 2, construct more node then form ring
            shared_ptr<Node<T>> stemp2 = head;
            for(int i=0;i<Row-1;i++){
                shared_ptr<Node<T>> sp = make_shared<Node<T>>();
                stemp2->col_next = sp;
                stemp2 = sp;
                if(i==Row-2) {sp->col_next = head;}
            }
            stemp2 = head->row_next;
            while(stemp2!= head){
                shared_ptr<Node<T>> stemp3 = stemp2; // stemp3 used to form  a column ring(remember the head for each node of the current row ring) for each iteration
                for(int i=0; i<Row-1; i++){
                    shared_ptr<Node<T>> sp = make_shared<Node<T>>();
                    stemp2->col_next = sp;
                    stemp2 = sp;
                    if(i==Row-2) {sp->col_next = stemp3;stemp2=stemp3;}
                }
                stemp2 = stemp2->row_next;
            }
        }

        // if column is more than 1 layer, we need to link it
        if(Row>1){
            if(Col == 1){
                shared_ptr<Node<T>> stemp1 = head;
                stemp1->col_next->row_next = stemp1->col_next;
                stemp1 = stemp1->col_next;
                while(stemp1!=head){
                    stemp1->col_next->row_next = stemp1->col_next;
                    stemp1 = stemp1->col_next;
                }
            }else{
                shared_ptr<Node<T>> stemp1 = head;
                shared_ptr<Node<T>> stemp2 = stemp1;
                shared_ptr<Node<T>> stemp3 = stemp2->row_next;
                while(stemp3!=stemp1){
                    stemp2->col_next->row_next = stemp3->col_next;
                    if(stemp3->row_next == stemp1) {stemp3->col_next->row_next = stemp1->col_next;}
                    stemp2 = stemp2->row_next;
                    stemp3 = stemp3->row_next;
                }
                stemp1 = head->col_next;
                stemp2 = stemp1;
                stemp3 = stemp2->row_next;
                while(stemp1!=head){
                    while(stemp3!=stemp1){
                        stemp2->col_next->row_next = stemp3->col_next;
                        if(stemp3->row_next == stemp1) {stemp3->col_next->row_next = stemp1->col_next;}
                        stemp2 = stemp2->row_next;
                        stemp3 = stemp3->row_next;
                        if(stemp3 == stemp1) {break;}
                    }
                    stemp1 = stemp1->col_next;
                    stemp2 = stemp1;
                    stemp3 = stemp2->row_next;
                }
            }
        }

        //assign value from R to *this
        shared_ptr<Node<T>> sp3 = R.head; // track row number of R
        shared_ptr<Node<T>> sp4; // track col number of R
        shared_ptr<Node<T>> sp5 = head; // track row number of *this
        shared_ptr<Node<T>> sp6; // track col number of *this
        for(int i=0; i<Row; i++){
            sp4 = sp3;
            sp6 = sp5;
            for(int j=0; j<Col; j++){
                sp6->pValue = make_shared<T>(*sp4->pValue);
                sp4 = sp4->row_next;
                sp6 = sp6->row_next;
            }
            sp3 = sp3->col_next;
            sp5 = sp5->col_next;
        }
    }


    cout << "Copy Assignment" << endl;
}

template <class T> Ring2D<T>::Ring2D(Ring2D<T>&& R){
    head = R.head;
    R.head.reset();
    cout << "Move Constructor" << endl;
}

template <class T> void Ring2D<T>::operator=(Ring2D<T>&& R){
    //delete the original structure
    if(head) {
        shared_ptr<Node<T>> sp1 = head->row_next;
        head->row_next.reset();
        shared_ptr<Node<T>> sp2 = head->col_next;
        while (sp2 != head) {
            sp2->row_next.reset();
            sp2 = sp2->col_next;
        } // after these operations, the sp1 will be the actually new head;

        sp2 = sp1->col_next;
        while (sp1) {
            sp1->col_next.reset();
            sp1 = sp1->row_next;
        } // after these operations, the sp2 will be the actually new head, and theis structure will change to a grid;

        sp2.reset();
    }
    head = R.head;
    R.head.reset();
    cout << "Move Assignment" << endl;
}

template <class T> Ring2D<T> Ring2D<T>::ThreeTimes() {

    Ring2D<T> temp = *this;

    if(!head){
        return temp;
    }

    int Row = 1;
    int Col = 1;
    shared_ptr<Node<T>> sp1 = temp.head->row_next;
    shared_ptr<Node<T>> sp2 = temp.head->col_next;
    while(sp1!=temp.head){
        Col++;
        sp1 = sp1->row_next;
    }
    while(sp2!=temp.head){
        Row++;
        sp2 = sp2->col_next;
    }

    sp1 = temp.head;
    for(int i=0; i<Row; i++){
        sp2 = sp1;
        for(int j=0; j<Col; j++){
            *sp2->pValue *= 3;
            sp2 = sp2->row_next;
        }
        sp1 = sp1->col_next;
    }
    return temp;
}

template <class T> void Ring2D<T>::DeleteRow(int r){
    // if r is smaller than 1, directly return
    if(r<1) return;
    // if head is nullptr, directly return
    if(!head) return;

    // if r is larger than the row number, directly return;
    int Row = 1;
    int Col = 1;
    shared_ptr<Node<T>> sp1 = head->row_next;
    shared_ptr<Node<T>> sp2 = head->col_next;
    while(sp1!=head){
        Col++;
        sp1 = sp1->row_next;
    }
    while(sp2!=head){
        Row++;
        sp2 = sp2->col_next;
    }
    if(r>Row) return;

    //then start to delete row
    if(Row==1){ // if the structure has only one layer
        sp1 = head->row_next;
        head->row_next.reset();
        /*shared_ptr<Node<T>>*/ sp2 = sp1;
        for(int i=0;i<Col; i++){
            sp1->col_next.reset();
            sp1 = sp1->row_next;
        }
        sp2.reset();
        head.reset();
    }else if(r==1){
        sp1 = head;
        sp2 = head;
        for(int i=0; i<Row-1; i++) {
            sp2 = sp2->col_next;
        }
        head = sp1->col_next;
        shared_ptr<Node<T>> sp3 = head;
        for (int j=0; j<Col; j++){
            sp2->col_next = sp3;
            sp2 = sp2->row_next;
            sp3 = sp3->row_next;
        }
        sp1.reset();
//        sp2.reset();
    }else{
            int counter1 = r-1; // used to find the line to be deleted
            int counter2 = Row-1; // used to find the line before deleted line
            sp1 = head;
            for(int i=0; i<counter1; i++){
                sp1 = sp1->col_next;
            }
            sp2 = sp1;
            for(int i=0; i<counter2; i++){
                sp2 = sp2->col_next;
            }
            for(int i=0; i<Col; i++){
                sp2->col_next = sp2->col_next->col_next;
                sp2 = sp2->row_next;
            }
            sp1->row_next.reset();
        }
    }

// operator << overloading
/*
Implement the needed overloaded operater<< such that you can do cout <<Ring2D<T> instance.
For the example described in the above initializer_list, you output should look like:
1 2 3 4
5 6 7 8
9 10 11 12
*/
template <class T>
ostream& operator<<(ostream& str, const Ring2D<T>& R){
    if(!R.head) {return str;}

    shared_ptr<Node<T>> sp1;
    shared_ptr<Node<T>> sp2;

    str << *R.head->pValue << " ";
    sp1 = R.head->row_next;
    while(sp1!=R.head){
        str << *sp1->pValue << " ";
        sp1 = sp1->row_next;
    }
    str << endl;
    sp1 = R.head->col_next;
    while(sp1!=R.head){
        sp2 = sp1;
        str << *sp2->pValue << " ";
        sp2 = sp2->row_next;
        while(sp2!=sp1){
            str << *sp2->pValue << " ";
            sp2 = sp2->row_next;
        }
        str << endl;
        sp1 = sp1->col_next;
    }
    return str;
}


/*
Print: "Copy Constructor", "Move Constructor", "Copy Assignment", "Move Assignment", "Destructor" when leaving
the corresponding functions --  the same way I did for Lecture on Ring (3/31/2020).


*/


int main() {
    Ring2D<int> R1{ 3,4,  1, 2, 3, 4,  5, 6, 7, 8,  9, 10, 11, 12};//initializer_list
//    Ring2D<int> R1{ 1,1,1};
//    Ring2D<int> R1{1,4,1,2,3,4};
//    Ring2D<int> R1{0,0};
    cout << R1 << endl<<endl;


    Ring2D<int> R2{ R1 };//copy constructor
    cout << R2 << endl<<endl;

    Ring2D<int> R3;
    R3 = R1;//copy assignment
    cout << R3 << endl << endl;

    Ring2D<int> R4;
    R4 = R1.ThreeTimes();//this is pointing to object R1
    //Compiler will convert it to R4.operator=(R1.ThreeTimes());
    //copy constructor -- declare temp and initialize it to R1
    //move constructor -- create hidden (temporary) copy
    //destructor-- delete temp becuase it goes out of scope
    //move assignment -- Assign value from hidden copy to R4
    //destructor-- delete hedden copy because it goes out of scope
    cout << R4 << endl<<endl;


    R4.DeleteRow(2);
    cout << R4 << endl << endl;
    R4.DeleteRow(2);
    cout << R4 << endl << endl;
    R4.DeleteRow(1);
    cout << R4 << endl << endl;

    return 0;
}





